#!/bin/bash 

# This script expects the following files to exist:
#   /workspace/digital_twins/o5g/main.py
#   /workspace/digital_twins/o5g/sensorSimulation.py
#   /workspace/digital_twins/o5g/telegraf.conf
#   /workspace/digital_twins/o5g/runTessla.sh
#   /workspace/digital_twins/o5g/config.py
#   /workspace/data/lab.ifc
#   /workspace/models/graphToPath.py
#   /workspace/models/pathToTime.py
#   /workspace/models/PathOxygenEstimate.mo
#   /workspace/models/makefmu.mos
#   /workspace/tools/ifc_to_graph
#   /workspace/tools/tessla/tessla-telegraf-connector/     containing the contents of 
#       https://git.tessla.io/telegraf/tessla-telegraf-connector/-/blob/master/Release/tessla-telegraf-connector.zip
#   /workspace/tools/tessla/tessla-telegraf-connector/specification.tessla

# exit if a command fails
set -e

printf "Install apt dependencies \n"

apt-get update
apt-get install -y ca-certificates curl gnupg build-essential default-jre-headless cargo curl jq

printf "Install OpenModelica \n"

if dpkg -l | grep -qw "omc"; then
  echo "OpenModelica is already installed"
else
  curl -fsSL http://build.openmodelica.org/apt/openmodelica.asc | gpg --dearmor -o /usr/share/keyrings/openmodelica-keyring.gpg
  echo "deb [arch=amd64 signed-by=/usr/share/keyrings/openmodelica-keyring.gpg] \
    https://build.openmodelica.org/apt \
    $(cat /etc/os-release | grep "\(UBUNTU\\|DEBIAN\\|VERSION\)_CODENAME" | sort | cut -d= -f 2 | head -1) \
    stable" | tee /etc/apt/sources.list.d/openmodelica.list
  apt-get update && apt-get install --no-install-recommends omc
fi

printf "Install telegraf \n"

if dpkg -l | grep -qw "telegraf"; then
  echo "Telegraf is already installed"
else
  # influxdata-archive_compat.key GPG Fingerprint: 9D539D90D3328DC7D6C8D3B9D8FF8E1F7DF8B07E
  curl -s https://repos.influxdata.com/influxdata-archive_compat.key > influxdata-archive_compat.key
  echo '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c && cat influxdata-archive_compat.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg > /dev/null
  echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | tee /etc/apt/sources.list.d/influxdata.list
  apt-get update && apt-get install telegraf
  rm influxdata-archive_compat.key
fi

printf "Install required pip packages \n"

# We expect pip to already be installed
pip install numpy scipy networkx matplotlib fmpy pytest paho-mqtt

printf "Compiling fmu from OpenModelica model \n"

cd /workspace/models
omc /workspace/models/makefmu.mos

chmod +x /workspace/digital_twins/o5g/runTessla.sh

printf "Create Grafana datasource"

source_uid=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer <Grafana HTTP API token>" -d '{
  "name": "o5g_influx",
  "type": "influxdb",
  "access": "proxy",
  "url": "<InfluxDB host>",
  "jsonData": 
    {"defaultBucket":"<Bucket ID>",
      "httpMode":"POST",
      "organization":"<InfluxDB Org>",
      "version":"Flux"
    },
  "secureJsonData":{
    "token":"<InfluxDB API Token>"
  }
}' http://<Grafana URL>:8088/api/datasources | tee | jq -r '.datasource.uid')

printf "Create Grafana visulization dashboard"

data="{\
  \"dashboard\": {\
    \"id\": null,\
    \"title\": \"O5G mission control\",\
    \"tags\": [ \"templated\" ],\
    \"timezone\": \"browser\",\
  \"panels\": [\
    {\
      \"datasource\": {\
        \"type\": \"influxdb\",\
        \"uid\": \"$source_uid\"\
      },\
      \"fieldConfig\": {\
        \"defaults\": {\
          \"color\": {\
            \"mode\": \"palette-classic\"\
          },\
          \"custom\": {\
            \"axisCenteredZero\": false,\
            \"axisColorMode\": \"text\",\
            \"axisLabel\": \"\",\
            \"axisPlacement\": \"auto\",\
            \"barAlignment\": 0,\
            \"drawStyle\": \"points\",\
            \"fillOpacity\": 0,\
            \"gradientMode\": \"none\",\
            \"hideFrom\": {\
              \"legend\": false,\
              \"tooltip\": false,\
              \"viz\": false\
            },\
            \"lineInterpolation\": \"linear\",\
            \"lineWidth\": 1,\
            \"pointSize\": 5,\
            \"scaleDistribution\": {\
              \"type\": \"linear\"\
            },\
            \"showPoints\": \"auto\",\
            \"spanNulls\": false,\
            \"stacking\": {\
              \"group\": \"A\",\
              \"mode\": \"none\"\
            },\
            \"thresholdsStyle\": {\
              \"mode\": \"area\"\
            }\
          },\
          \"mappings\": [],\
          \"thresholds\": {\
            \"mode\": \"absolute\",\
            \"steps\": [\
              {\
                \"color\": \"red\",\
                \"value\": null\
              },\
              {\
                \"color\": \"light-green\",\
                \"value\": 2\
              }\
            ]\
          }\
        },\
        \"overrides\": []\
      },\
      \"gridPos\": {\
        \"h\": 17,\
        \"w\": 13,\
        \"x\": 0,\
        \"y\": 0\
      },\
      \"id\": 1,\
      \"options\": {\
        \"legend\": {\
          \"calcs\": [],\
          \"displayMode\": \"list\",\
          \"placement\": \"bottom\",\
          \"showLegend\": true\
        },\
        \"tooltip\": {\
          \"mode\": \"single\",\
          \"sort\": \"none\"\
        }\
      },\
      \"targets\": [\
        {\
          \"datasource\": {\
            \"type\": \"influxdb\",\
            \"uid\": \"$source_uid\"\
          },\
          \"query\": \"from(bucket: \\\"o5g_bucket\\\")\\r\\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\\r\\n  |> filter(fn: (r) =>\\r\\n    r._measurement == \\\"prediction\\\" and\\r\\n    r._field == \\\"air-remaining\\\"\\r\\n  )\",\
          \"refId\": \"A\"\
        }\
      ],\
      \"title\": \"Panel Title\",\
      \"type\": \"timeseries\"\
    }\
  ],\
  \"overwrite\": false\
}}"

echo $data | curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer <Grafana HTTP API Token" -d @- http://<Grafana Url>/api/dashboards/db

printf "\n\nDone installing, use execute script to run digital twin \n"
